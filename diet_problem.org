#+PROPERTY: header-args:python :results output raw  :noweb no-export :exports code

* Preface
  We need some particular versions of the following modules;
#+begin_src python :session :results silent
!pip install -r requirements.txt
#+end_src

  Add a string for your username here:
  #+begin_src python
user = "ligon"
  #+end_src

* USDA Nutrition DataBase

  The USDA maintains a database of nutritional information, where
  different kinds of food are identified by an NDB number.  They do
  not provide any data on prices.  

  To look up nutritional information, use api provided by the USDA at
  https://ndb.nal.usda.gov/ndb/doc/index.   You'll need to sign up for a
  free api key (see directions on page), then add that key here:

#+begin_src python :session :tangle diet_problem.py :results silent
  apikey = {'ligon':"inIyO1begWSRqsYtxS7m6p09PSyq7Qiw7fxzV2qN"}
#+end_src

* Data on Prices

Here's an effort to describe some different kinds of food, along with
data on food prices.  This is all just based on my last trip to the
grocery store, except that I've used the USDA database to look up NDB
numbers.  Note that one may need to protect leading zeros with "" for
the NDB numbers.

Also note that some kinds of foods need to have unit weights (in
grams) supplied under "Units"; e.g., extra large eggs are taken to
each weigh 56g.  These conversions can also often be found on the USDA
NDB website.  Othertimes not---I still need to weigh a crumpet.

Food is purchased in particular units (gallons, pounds, grams).  And
in some cases the natural units are things like donuts or eggs, in
which case we may need to define our  own units (see the example of
"xl_egg" below).


#+name: food_prices
| Food                   | Quantity | Units   | Price | Date             | Location                  |      NDB |
|------------------------+----------+---------+-------+------------------+---------------------------+----------|
| Milk, 2% fat           |        1 | gallon  |  4.99 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45226447 |
| Eggs, extra large      |       12 | xl_egg  |  3.59 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45208918 |
| Crumpets               |        6 | crumpet |  3.19 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45324369 |
| Bananas                |        1 | pound   |  3.15 | [2019-09-14 Sat] | Monterey Market, Berkeley |  "09040" |
| Carrots, Organic       |        2 | pound   |  2.29 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11124 |
| Cauliflower            |     2.51 | pound   |  4.24 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11135 |
| Endive, Red            |     1.26 | pound   |  6.27 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11213 |
| Figs, black mission    |        1 | pound   |  4.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45170327 |
| Leeks, Organic         |        1 | pound   |  1.29 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11246 |
| Lettuce, Little Gem    |        1 | pound   |  5.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45276886 |
| Mushrooms, King Oyster |        1 | pound   |    12 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45218868 |
| Onion, yellow          |        1 | pound   |  0.39 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45339306 |
| Orange juice           |      0.5 | gallon  |  8.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45213207 |
| Parsnip                |        1 | pound   |  1.98 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11298 |
| Potato, marble mix     |        1 | pound   |  2.59 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45169597 |
| Rhubarb                |        1 | pound   |  1.84 | [2019-09-14 Sat] | Monterey Market, Berkeley |  "09307" |
| Potato, russet         |       10 | pound   |  2.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45364251 |
| Squash, Zucchini       |        1 | pound   |  1.49 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11477 |

#+begin_src python :var F=food_prices :colnames no :results silent :exports none
  from cfe.df_utils import orgtbl_to_df, df_to_orgtbl

  df = orgtbl_to_df(F,dtype=str)
  df.to_csv('./Data/ligons_shopping.csv')

#+end_src

And here's a little code to help look up NDB codes for foods of
different descriptions.

#+begin_src python :results output :session :tangle diet_problem.py 
import ndb

ndb.ndb_search(apikey[user],"Great Value Buttermilk Pancakes")
#+end_src



* Price information

The code below allows us to collect data on different kinds of food
with their prices from two different sources: =csv= files in the
directory [[./Data/]] or from google spreadsheets.

** Local =csv= files

Information on prices for different goods is found in a collection of
=csv= files in [[./Data/]].  You can generate additional files by using a
spreadsheet and exporting to the appropriate file format, then putting
that file in the [[./Data/]] directory.  These files should have the same
columns and format as the example above.  Then add them to the list
below.

#+begin_src python :session :tangle diet_problem.py
CSVs = [
        "./Data/icrisat_foods.csv"    # Prices for food consumed in Indian ICRISAT villages
       ]
#+end_src

#+results:

** Using data from Google Sheets

Alternatively, rather than creating & uploading =csv= files we can
also supply code to find files over the internet.  Here we supply code
which allows one to input data on prices in a format similar to that
above (i.e., a spreadsheet with seven columns, labeled Food, Quantity,
Units, Price, Date, Location, and NDB).

Using google sheets in this way requires you establish some
credentials.   Follow Step 1 in [[https://developers.google.com/sheets/api/quickstart/python#step_1_turn_on_the_api_name][Turn on the API]].

#+begin_src python :session :tangle diet_problem.py
# ID of sheet and name of worksheet for google sheets.   
# These must be public (until we work out google oauth)
SHEETs = [("1ra1APq6K-DVRn6tHzXzxBaa49US6t7JpmYYpDaUYN9c",""),        # Ligon's shopping list
          ("1ObK5N_5aVXzVHE7ZXWBg0kQvPS3k1enRwsUjhytwh5A","Table 2"), # Stigler's foods, modern prices
         ]
#+end_src

*************** TODO See =pydrive= for way to manage authentication
    https://gsuitedevs.github.io/PyDrive/docs/build/html/oauth.html#sample-settings-yaml
*************** END


** Compile data on food prices

#+begin_src python :session :tangle diet_problem.py
  import ndb
  import pandas as pd
  import warnings

  DFs = []
  for csv in CSVs:
    DFs.append(pd.read_csv(csv,dtype=str))

  try:
      if len(SHEETs):
          for ID, RANGE_NAME in SHEETs:
             try:
                 DFs.append(pd.read_csv("https://docs.google.com/spreadsheet/ccc?key=%s&output=csv" % ID))
             except ParserError:
                 warnings.warn("Can't read sheet at https://docs.google.com/spreadsheets/d/%s.\n
                                Check Sharing settings, so that anyone with link can view?" % ID)
  except NameError: # SHEETS not defined?
      pass

  df = pd.concat(DFs,ignore_index=True,sort=False)
  # Some columns which ought to be numeric are actually str; convert them
  df['Price'] = df['Price'].astype(float)
  df['Quantity'] = df['Quantity'].astype(float)

  D = {}
  for food in  df.Food.tolist():
      try:
          NDB = df.loc[df.Food==food,:].NDB
          D[food] = ndb.ndb_report(apikey[user],NDB).Quantity
      except AttributeError: 
          warnings.warn("Couldn't find NDB Code %s for food %s." % (food,NDB))
          

  D = pd.DataFrame(D,dtype=float)

  print(D.index)

#+end_src

#+results:


* Units & Prices

A function =ndb_units= in the [[file:ndb.py::from%20urllib.request%20import%20Request,%20urlopen][ndb]] module accomplishes this conversion
for many different units, using the =python= [[https://pint.readthedocs.io/en/latest/][pint module]].  A file
[[file:Data/food_units.txt][./Data/food_units.txt]] can be edited to deal with odd cases such as
donuts, using a format described in the =pint= [[https://pint.readthedocs.io/en/latest/defining.html][documentation]]. 

#+begin_src python :results output raw :session :tangle diet_problem.py 
# Convert food quantities to NDB units
df['NDB Quantity'] = df[['Quantity','Units']].T.apply(lambda x : ndb.ndb_units(x['Quantity'],x['Units']))

# Now may want to filter df by time or place--need to get a unique set of food names.
df['NDB Price'] = df['Price']/df['NDB Quantity']

df.dropna(how='any') # Drop food with any missing data

# To use minimum price observed
Prices = df.groupby('Food')['NDB Price'].min()

print(Prices.head())
#+end_src

* Dietary Requirements

We've figured out some foods we can buy, the nutritional content of
those foods, and  the price of the foods.  Now we need to say
something about nutritional requirements.   Our data for this is based
on  US government recommendations available at
https://health.gov/dietaryguidelines/2015/guidelines/appendix-7/.
Note that we've tweaked the nutrient labels to match those in the NDB
data.

We've broken down the requirements into three different tables.  The
first is /minimum/ quantities that we need to  satisfy.  For example,
this table tells us that a 20 year-old female needs at least 46 grams
of protein per day.

#+name: diet_minimums
| Nutrition                      | Source | C 1-3 | F 4-8 | M 4-8 | F 9-13 | M 9-13 | F 14-18 | M 14-18 | F 19-30 | M 19-30 | F 31-50 | M 31-50 | F 51+ | M 51+ |
|--------------------------------+--------+-------+-------+-------+--------+--------+---------+---------+---------+---------+---------+---------+-------+-------|
| Energy                         | ---    |  1000 |  1200 |  1400 |   1600 |   1800 |    1800 |    2200 |    2000 |    2400 |    1800 |    2200 |  1600 |  2000 |
| Protein                        | RDA    |    13 |    19 |    19 |     34 |     34 |      46 |      52 |      46 |      56 |      46 |      56 |    46 |    56 |
| Fiber, total dietary           | ---    |    14 |  16.8 |  19.6 |   22.4 |   25.2 |    25.2 |    30.8 |      28 |    33.6 |    25.2 |    30.8 |  22.4 |    28 |
| Folate, DFE                    | RDA    |   150 |   200 |   200 |    300 |    300 |     400 |     400 |     400 |     400 |     400 |     400 |   400 |   400 |
| Calcium, Ca                    | RDA    |   700 |  1000 |  1000 |   1300 |   1300 |    1300 |    1300 |    1000 |    1000 |    1000 |    1000 |  1200 |  1000 |
| Carbohydrate, by difference    | RDA    |   130 |   130 |   130 |    130 |    130 |     130 |     130 |     130 |     130 |     130 |     130 |   130 |   130 |
| Iron, Fe                       | RDA    |     7 |    10 |    10 |      8 |      8 |      15 |      11 |      18 |       8 |      18 |       8 |     8 |     8 |
| Magnesium, Mg                  | RDA    |    80 |   130 |   130 |    240 |    240 |     360 |     410 |     310 |     400 |     320 |     420 |   320 |   420 |
| Niacin                         | RDA    |     6 |     8 |     8 |     12 |     12 |      14 |      16 |      14 |      16 |      14 |      16 |    14 |    16 |
| Phosphorus, P                  | RDA    |   460 |   500 |   500 |  1250  |  1250  |   1250 |   1250 |     700 |     700 |     700 |     700 |   700 |   700 |
| Potassium, K                   | AI     |  3000 |  3800 |  3800 |   4500 |   4500 |    4700 |    4700 |    4700 |    4700 |    4700 |    4700 |  4700 |  4700 |
| Riboflavin                     | RDA    |   0.5 |   0.6 |   0.6 |    0.9 |    0.9 |       1 |     1.3 |     1.1 |     1.3 |     1.1 |     1.3 |   1.1 |   1.3 |
| Thiamin                        | RDA    |   0.5 |   0.6 |   0.6 |    0.9 |    0.9 |       1 |     1.2 |     1.1 |     1.2 |     1.1 |     1.2 |   1.1 |   1.2 |
| Vitamin A, RAE                 | RDA    |   300 |   400 |   400 |    600 |    600 |     700 |     900 |     700 |     900 |     700 |     900 |   700 |   900 |
| Vitamin B-12                   | RDA    |   0.9 |   1.2 |   1.2 |    1.8 |    1.8 |     2.4 |     2.4 |     2.4 |     2.4 |     2.4 |     2.4 |   2.4 |   2.4 |
| Vitamin B-6                    | RDA    |   0.5 |   0.6 |   0.6 |      1 |      1 |     1.2 |     1.3 |     1.3 |     1.3 |     1.3 |     1.3 |   1.5 |   1.7 |
| Vitamin C, total ascorbic acid | RDA    |    15 |    25 |    25 |     45 |     45 |      65 |      75 |      75 |      90 |      75 |      90 |    75 |    90 |
| Vitamin E (alpha-tocopherol)   | RDA    |     6 |     7 |     7 |     11 |     11 |      15 |      15 |      15 |      15 |      15 |      15 |    15 |    15 |
| Vitamin K (phylloquinone)      | AI     |    30 |    55 |    55 |     60 |     60 |      75 |      75 |      90 |     120 |      90 |     120 |    90 |   120 |
| Zinc, Zn                       | RDA    |     3 |     5 |     5 |      8 |      8 |       9 |      11 |       8 |      11 |       8 |      11 |     8 |    11 |
| Vitamin D                      | RDA    |   600 |   600 |   600 |    600 |    600 |     600 |     600 |     600 |     600 |     600 |     600 |  600  |  600  |

#+begin_src python :var X=diet_minimums :colnames no :results silent :exports none
  from cfe.df_utils import orgtbl_to_df, df_to_orgtbl

  df = orgtbl_to_df(X,dtype=str)
  df.to_csv('./diet_minimums.csv')

#+end_src

This next table specifies /maximum/ quantities.  Our 20 year-old
female shouldn't have more than 2300 milligrams of sodium per day.
Note that we can also add constraints here on nutrients that also
appear above.  For example, here we've added upper limits on Energy,
as we might do if we were trying to lose weight.

#+name: diet_maximums
| Nutrition  | Source | C 1-3 | F 4-8 | M 4-8 | F 9-13 | M 9-13 | F 14-18 | M 14-18 | F 19-30 | M 19-30 | F 31-50 | M 31-50 | F 51+ | M 51+ |
|------------+--------+-------+-------+-------+--------+--------+---------+---------+---------+---------+---------+---------+-------+-------|
| Sodium, Na | UL     |  1500 |  1900 |  1900 |   2200 |   2200 |    2300 |    2300 |    2300 |    2300 |    2300 |    2300 |  2300 |  2300 |
| Energy     | ---    |  1500 |  1600 |  1800 |   2000 |   2200 |    2200 |    2500 |    2400 |    2600 |    2200 |    2400 |  1800 |  2400 |

#+begin_src python :var X=diet_maximums :colnames no :results silent :exports none
  from cfe.df_utils import orgtbl_to_df, df_to_orgtbl

  df = orgtbl_to_df(X,dtype=str)
  df.to_csv('./diet_maximums.csv')

#+end_src

Finally, we have some odd constraints given in this final table.
Mostly the items given don't correspond to items in the NDB data
(e.g., copper), but in some cases it may be possible to match things
up.  We can't use these without some additional work.

#+name: diet_oddities
| Nutrition             | Source | C 1-3 | F 4-8 | M 4-8 | F 9-13 | M 9-13 | F 14-18 | M 14-18 | F 19-30 | M 19-30 | F 31-50 | M 31-50 | F 51+ | M 51+ |
|-----------------------+--------+-------+-------+-------+--------+--------+---------+---------+---------+---------+---------+---------+-------+-------|
| Carbohydrate, % kcal  | AMDR   | 45-65 | 45-65 | 45-65 |  45-65 |  45-65 |   45-65 |   45-65 |   45-65 |   45-65 |   45-65 |   45-65 | 45-65 | 45-65 |
| Added sugars, % kcal  | DGA    |  <10% |  <10% |  <10% |   <10% |   <10% |    <10% |    <10% |    <10% |    <10% |    <10% |    <10% |  <10% |  <10% |
| Total fat, % kcal     | AMDR   | 30-40 | 25-35 | 25-35 |  25-35 |  25-35 |   25-35 |   25-35 |   20-35 |   20-35 |   20-35 |   20-35 | 20-35 | 20-35 |
| Saturated fat, % kcal | DGA    |  <10% |  <10% |  <10% |   <10% |   <10% |    <10% |    <10% |    <10% |    <10% |    <10% |    <10% |  <10% |  <10% |
| Linoleic acid, g      | AI     |     7 |    10 |    10 |     10 |     12 |      11 |      16 |      12 |      17 |      12 |      17 |    11 |    14 |
| Linolenic acid, g     | AI     |   0.7 |   0.9 |   0.9 |      1 |    1.2 |     1.1 |     1.6 |     1.1 |     1.6 |     1.1 |     1.6 |   1.1 |   1.6 |
| Copper, mcg           | RDA    |   340 |   440 |   440 |    700 |    700 |     890 |     890 |     900 |     900 |     900 |     900 |   900 |   900 |
| Manganese, mg         | AI     |   1.2 |   1.5 |   1.5 |    1.6 |    1.9 |     1.6 |     2.2 |     1.8 |     2.3 |     1.8 |     2.3 |   1.8 |   2.3 |
| Selenium, mcg         | RDA    |    20 |    30 |    30 |     40 |     40 |      55 |      55 |      55 |      55 |      55 |      55 |    55 |    55 |
| Choline, mg           | AI     |   200 |   250 |   250 |    375 |    375 |     400 |     550 |     425 |     550 |     425 |     550 |   425 |   550 |

  - Notes on Source :: In each of these tables, RDA = Recommended
       Dietary Allowance, AI = Adequate Intake, UL = Tolerable Upper
       Intake Level, AMDR = Acceptable Macronutrient Distribution
       Range, DGA = 2015-2020 Dietary Guidelines recommended limit; 14
       g fiber per 1,000 kcal = basis for AI for fiber.


#+begin_src python :results output raw :session :tangle diet_problem.py 
# Choose sex/age group:
group = "M 51+"

# Define *minimums*
bmin = pd.read_csv('./diet_minimums.csv').set_index('Nutrition')[group]

# Define *maximums*
bmax = pd.read_csv('./diet_maximums.csv').set_index('Nutrition')[group]

#+end_src
* Putting it together

Here we take the different pieces of the puzzle we've developed and
put them together in the form of a linear program we can solve.

#+begin_src python :results output raw :session :tangle diet_problem.py 
from  scipy.optimize import linprog as lp
import numpy as np

tol = 1e-6 # Numbers in solution smaller than this (in absolute value) treated as zeros

c = Prices.apply(lambda x:x.magnitude).dropna()

# Compile list that we have both prices and nutritional info for; drop if either missing
use = list(set(c.index.tolist()).intersection(D.columns.tolist()))
c = c[use]

# Drop nutritional information for foods we don't know the price of,
# and replace missing nutrients with zeros.
Aall = D[c.index].fillna(0)

# Drop rows of A that we don't have constraints for.
Amin = Aall.loc[bmin.index]

Amax = Aall.loc[bmax.index]

# Minimum requirements involve multiplying constraint by -1 to make <=.
A = pd.concat([-Amin,Amax])

b = pd.concat([-bmin,bmax]) # Note sign change for min constraints

# Now solve problem!
result = lp(c, A, b, method='interior-point')

# Put back into nice series
diet = pd.Series(result.x,index=c.index)

print("Cost of diet for %s is $%4.2f per day." % (group,result.fun))
print("\nYou'll be eating (in 100s of grams or milliliters):")
print(diet[diet >= tol])  # Drop items with quantities less than precision of calculation.

tab = pd.DataFrame({"Outcome":np.abs(A).dot(diet),"Recommendation":np.abs(b)})
print("\nWith the following nutritional outcomes of interest:")
print(tab)

print("\nConstraining nutrients are:")
excess = tab.diff(axis=1).iloc[:,1]
print(excess.loc[np.abs(excess) < tol].index.tolist())

#+end_src
  
* Appendix =ndb=                                                   :noexport:
#+begin_src python :results output raw :tangle ndb.py
from urllib.request import Request, urlopen
import pandas as pd
import json
import warnings
from pint import UnitRegistry, UndefinedUnitError, DimensionalityError
ureg = UnitRegistry()
ureg.load_definitions('./Data/food_units.txt') 
import numpy as np

#%matplotlib inline

import requests

def ndb_search(apikey, term, url = 'https://api.nal.usda.gov/ndb/search'):
    """
    Search Nutrition DataBase, using apikey and string "term" as search criterion.

    Returns a pd.DataFrame of results.
    """
    parms = (('format', 'json'),('q', term),('api_key', apikey))
    r = requests.get(url, params = parms)
    if 'list' in r.json():
        l = r.json()['list']['item']
    else: 
        return []

    return pd.DataFrame(l)

def ndb_report(apikey, ndbno, url = 'https://api.nal.usda.gov/ndb/V2/reports'):
    """Construct a food report for food with given ndbno.  

    Nutrients are given per 100 g or 100 ml of the food.
    """
    params = (('ndbno', ndbno),('type', 'b'),('format', 'json'),('api_key', apikey))

    try:
        r = requests.get(url, params = params)
        L = r.json()['foods'][0]['food']['nutrients']
    except KeyError:
        warnings.warn("Couldn't find NDB=%s." % ndbno)
        return None

    v = {}
    u = {}
    for l in L:
        v[l['name']] = l['value']  # Quantity
        u[l['name']] = l['unit']  # Units

    #print(l)
    N = pd.DataFrame({'Quantity':v,'Units':u})

    return N

def ndb_units(q,u,ureg=ureg):
    """Convert quantity q of units u to 100g or 100ml."""
    try:
        x = ureg.Quantity(float(q),u)
    except UndefinedUnitError:
        return ureg.Quantity(np.NaN,'ml')

    try:
        return x.to(ureg.hectogram)
    except DimensionalityError:
        return x.to(ureg.deciliter)

#+end_src



